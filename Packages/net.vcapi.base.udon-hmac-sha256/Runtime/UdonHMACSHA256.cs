
using System;
using Koyashiro.UdonSHA2;

namespace VCAPI.Base
{
    public static class UdonHMACSHA256
    {
        private static void _ComputeKeyPad(byte[] key, out byte[] ikeypad, out byte[] okeypad)
        {
            if (key.Length > 64) key = SHA256.ComputeHash(key);

            ikeypad = _Xor(key, new byte[] { 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36 });
            okeypad = _Xor(key, new byte[] { 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c });
        }

        private static byte[] _Xor(byte[] a, byte[] b)
        {
            byte[] output = new byte[b.Length];
            for (int i = 0; i < a.Length; i++) {
                output[i] = (byte)(a[i] ^ b[i]);
            }
            if (a.Length < b.Length) {
                Array.Copy(b, a.Length, output, a.Length, b.Length - a.Length);
            }
            return output;
        }

        private static byte[] _Pass(byte[] a, byte[] b)
        {
            byte[] input = new byte[a.Length + b.Length];
            Array.Copy(a, input, a.Length);
            Array.Copy(b, 0, input, a.Length, b.Length);
            return SHA256.ComputeHash(input);
        }

        public static byte[] ComputeHash(byte[] key, byte[] buffer)
        {
            _ComputeKeyPad(key, out var ikeypad, out var okeypad);
            return _Pass(okeypad, _Pass(ikeypad, buffer));
        }
    }
}
